/*

Link - https://leetcode.com/explore/featured/card/may-leetcoding-challenge/538/week-5-may-29th-may-31st/3345/

We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

 

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)
 

Note:

1 <= K <= points.length <= 10000
-10000 < points[i][0] < 10000
-10000 < points[i][1] < 10000

*/

//Solution in java
class Solution {
    public int[][] kClosest(int[][] points, int K) {
        HashMap<Integer,Integer> map = new HashMap<>();
        int [][]ans = new int[K][2];
        int len = points.length;
        for(int i=0;i<len;i++){
            int x = points[i][0];
            int y = points[i][1];
            map.put(i,x*x+y*y);
        }
        map=sortByValue(map);
        int index=0;
        for(Map.Entry<Integer,Integer> entry: map.entrySet()){
            ans[index][0]=points[entry.getKey()][0];
            ans[index][1]=points[entry.getKey()][1];
            System.out.println(entry.getKey()+" "+entry.getValue());
            K--;
            index++;
            if(K==0)break;
        }
        return ans;
    }
    // function to sort hashmap by values 
    public static HashMap<Integer, Integer> sortByValue(HashMap<Integer, Integer> hm) 
    { 
        // Create a list from elements of HashMap 
        List<Map.Entry<Integer, Integer> > list = 
               new LinkedList<Map.Entry<Integer, Integer> >(hm.entrySet()); 
  
        // Sort the list 
        Collections.sort(list, new Comparator<Map.Entry<Integer, Integer> >() { 
            public int compare(Map.Entry<Integer, Integer> o1,  
                               Map.Entry<Integer, Integer> o2) 
            { 
                return (o1.getValue()).compareTo(o2.getValue()); 
            } 
        }); 
          
        // put data from sorted list to hashmap  
        HashMap<Integer, Integer> temp = new LinkedHashMap<Integer, Integer>(); 
        for (Map.Entry<Integer, Integer> aa : list) { 
            temp.put(aa.getKey(), aa.getValue()); 
        } 
        return temp; 
    } 
}


//Soltuion in python
class Solution(object):
    def kClosest(self, points, K):
        points.sort(key= lambda d : d[0]**2+d[1]**2)
        return points[:K]
        
